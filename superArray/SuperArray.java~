/*
  Team Array ban-Kevin Wang and Isaac Jon
  APCS1 Pd. 8
  HW #42--Array of Grade 316
  2017-11-28
*/

/***************************
 * class SuperArray version 2.0
 * (SKELETON)
 * Wrapper class for array. Facilitates resizing,
 * resizing
 * expansion
 * read/write capability on elements
 * adding an element to end of array
 * adding an element at specified index
 * removing an element at specified index
 ***************************/

public class SuperArray {

    private Object[] _data;  //underlying container
    private int _size;    //number of elements in this SuperArray

    //default constructor initializes 10-item array
    public SuperArray() {
	_data = new Object[10];
	_size = 0; //# of meaningful elements in _data
    }

    //Throws IndexOutOfBoundsException if index is less than 0
    //or greater than or equal to size
    public void checkIndex(int index) {
	if(index < 0 || index > _size)
	    throw new IndexOutOfBoundsException();
    }

    //output SuperArray in [a,b,c] format
    public String toString() {
	String out = "[";
	for(int i = 0; i < _size; i++) {
	    out += _data[i] + ",";
	}
	if (out.length() > 1) //shave off trailing comma
	    out = out.substring(0, out.length()-1);
	out += "]";
	return out;
    }
	
    //output SuperArray in [a,b,c] format
    //includes all values - even meaningless ones
    public void print() {
	String out = "[";
	for(int i = 0; i < _data.length; i++) {
	    out += _data[i] + ",";
	}
	if (out.length() > 1) //shave off trailing comma
	    out = out.substring(0, out.length()-1);
	out += "]";
	System.out.println(out);
    }

    //double capacity of SuperArray
    private void expand() {
	Object[] temp = new Object[_data.length * 2];
	for(int i = 0; i < _data.length; i++)
	    temp[i] = _data[i];
	_data = temp;
    }

    //accessor -- return value at specified index
    public Object get(int index) {
        checkIndex(index);
	return _data[index];
    }

    //mutator -- set value at index to newVal,
    //           return old value at index
    public Object set(int index, Object newVal) {
	checkIndex(index);
	Object temp = _data[index];
	_data[index] = newVal;
	return temp;
    }

    //adds an item after the last item
    //Returns true
    public boolean add(Object newVal) {
	if(_size >= _data.length) //if # of meaninging elmnts is >= to underlying array length
	    expand(); //make underlying array bigger
	set(_size, newVal); //assigns newVal at index _size
	_size += 1; //add 1 to the # of meaningful values
	return true;
    }

    //inserts an item at index
    public void add(int index, Object newVal) {
	checkIndex(index);
	if(_size >= _data.length) { //if # of meaningful elmnts is >= underlying array length
	    expand(); //expand underlying array
	}
      
	for (int i = _size - 1; i >= index; i--) {
	    set(i + 1, get(i)); //moves elmnts after index 1 unit right
	}
	set(index, newVal); //assigns newVal at index
	_size += 1; //add 1 to the # of meaningful values
    }
    

    //removes the item at index
    //shifts elements left to fill in newly-empted slot
    //Returns previously stored element at index
    public Object remove(int index) {
	checkIndex(index);
	Object temp = _data[index];
	for (int i = index; i < size()-1; i++) {
	    set(i, get(i + 1)); //move elmnts to the right of index 1 unit left
	}
	_size -= 1; //subtract 1 from the # of meaningful values
	return temp;
    }

    //return number of meaningful items in _data
    public int size() {
	return _size;
    }

    //main method for testing
    public static void main(String[] args) {
   
	SuperArray curtis = new SuperArray();
	System.out.println("Printing empty SuperArray curtis...");
	System.out.println(curtis);
	//curtis.print();

	for(int i = 0; i < curtis._data.length; i++) {
	    curtis.add(i, i * 2);
	}
	

	System.out.println("Printing populated SuperArray curtis...");
	System.out.println(curtis);
	//curtis.print();

	for(int i = 0; i < 3; i++) {
	    curtis.expand();
	    System.out.println("Printing expanded SuperArray curtis...");
	    System.out.println(curtis);
	    //curtis.print();
	    System.out.println("new length of underlying array: " + curtis._data.length);
	}

	SuperArray mayfield = new SuperArray();
	System.out.println("Printing empty SuperArray mayfield...");
	System.out.println(mayfield);
	//mayfield.print();

	/* testing resizing ability
	   for (int i = 10; i > 0; i--) {
	   mayfield.add(i);
	   }
	*/
	

	for (int i = 5; i > 0; i--) {
	    mayfield.add(i);
	}
    
	System.out.println("Printing populated SuperArray mayfield...");
	System.out.println(mayfield);
	//mayfield.print();

	mayfield.add(3,99);
	System.out.println("Printing SuperArray mayfield post-insert...");
	System.out.println(mayfield);
	//mayfield.print();
	mayfield.add(2,88);
	System.out.println("Printing SuperArray mayfield post-insert...");
	System.out.println(mayfield);
	//mayfield.print();
	mayfield.add(1,77);
	System.out.println("Printing SuperArray mayfield post-insert...");
	System.out.println(mayfield);
	//mayfield.print();
	mayfield.add(1,66);
	System.out.println("Printing SuperArray mayfield post-insert...");
	System.out.println(mayfield);
	//mayfield.print();
	mayfield.add(5,55);
	System.out.println("Printing SuperArray mayfield post-insert...");
	System.out.println(mayfield);
	//mayfield.print();
	mayfield.add(3,44);
	System.out.println("Printing SuperArray mayfield post-insert...");
	System.out.println(mayfield);
	//mayfield.print();
	//mayfield.add(18,33); //Throws IndexOutOfBounds if index > size
	//System.out.println("Printing SuperArray mayfield post-insert...");
	//System.out.println(mayfield);
	//mayfield.print();

	mayfield.remove(3);
	System.out.println("Printing SuperArray mayfield post-remove...");
	System.out.println(mayfield);
	//mayfield.print();
	mayfield.remove(3);
	System.out.println("Printing SuperArray mayfield post-remove...");
	System.out.println(mayfield);
	//mayfield.print();
	mayfield.remove(0);
	System.out.println("Printing SuperArray mayfield post-remove...");
	System.out.println(mayfield);
	//mayfield.print();

	for (int i = 5; i > 0; i--) {
	    mayfield.add(100 * i);
	}
	System.out.println("Printing SuperArray mayfield post-insert...");
	System.out.println(mayfield);
	//mayfield.add(1000, -1); //-1 out of range
	//System.out.println("Printing SuperArray mayfield post-insert...");
	//System.out.println(mayfield);
	//mayfield.print();
    }//end main()
}//end class
